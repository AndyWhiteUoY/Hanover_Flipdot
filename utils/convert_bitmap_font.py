#!/usr/bin/python

fonts = [
    0x0000000000000000, 0xE080EA2AEE0A0A00, 0xE080EA2AE40A0A00, 
    0xE080CA8AE40A0A00, 0xE080CE84E4040400, 0xE080CE8AEA0E0400, 
    0xE0A0EAAAAC0A0A00, 0xC0A0C8A8C8080E00, 0xC0A0CEA8CE020E00,
    0xA0A0EEA4A4040400, 0x80808E88EC080800, 0xA0A0AEA444040400,
    0xE080CE888C080800, 0xE0808E8AEE0C0A00, 0xE080EE2AEA0A0E00,
    0xE080EE24E4040E00, 0xC0A0A8A8C8080E00, 0xC0A0A4ACC4040E00,
    0xC0A0AEA2CE080E00, 0xC0A0AEA2C6020E00, 0xC0A0AAAACE020200,
    0xE0A0AAAAAC0A0A00, 0xE080EA2AEE040400, 0xE080CC8AEC0A0C00,
    0xE0808E8AEA0A0A00, 0xE080CA8EEA0A0A00, 0x3C66663018001800, 
    0xE080CE88E8080E00, 0xE080CE888E020E00, 0xE080AEA8EE020E00,
    0xE0A0EEC8AE020E00, 0xA0A0AEA8EE020E00, 0x0000000000000000,
    0x1818181818001800, 0x6666660000000000, 0x6C6CFE6CFE6C6C00,
    0x183E603C067C1800, 0x00C6CC183066C600, 0x386C3876DCCC7600,
    0x1818300000000000, 0x0C18303030180C00, 0x30180C0C0C183000,
    0x00663CFF3C660000, 0x0018187E18180000, 0x0000000000181830,
    0x0000007E00000000, 0x0000000000181800, 0x03060C183060C000,
    0x3C666E7666663C00, 0x1838181818187E00, 0x3C660C1830607E00,
    0x3C66061C06663C00, 0x1C3C6CCCFE0C0C00, 0x7E607C0606663C00,
    0x1C30607C66663C00, 0x7E06060C18181800, 0x3C66663C66663C00,
    0x3C66663E060C3800, 0x0018180000181800, 0x0018180000181830,
    0x0C18306030180C00, 0x00007E007E000000, 0x6030180C18306000,
    0x3C66060C18001800, 0x7CC6DEDEDEC07C00, 0x183C66667E666600,
    0x7C66667C66667C00, 0x3C66606060663C00, 0x786C6666666C7800,
    0x7E60607C60607E00, 0x7E60607C60606000, 0x3C66606E66663E00,
    0x6666667E66666600, 0x7E18181818187E00, 0x0606060606663C00,
    0xC6CCD8F0D8CCC600, 0x6060606060607E00, 0xC6EEFED6C6C6C600,
    0xC6E6F6DECEC6C600, 0x3C66666666663C00, 0x7C66667C60606000,
    0x3C666666666C3600, 0x7C66667C6C666600, 0x3C66603C06663C00,
    0x7E18181818181800, 0x6666666666663C00, 0x66666666663C1800,
    0xC6C6C6D6FEEEC600, 0xC3663C183C66C300, 0xC3663C1818181800,
    0x7E060C1830607E00, 0x3C30303030303C00, 0xC06030180C060300,
    0x3C0C0C0C0C0C3C00, 0x10386CC600000000, 0x00000000000000FF,
    0x180C060000000000, 0x00003C063E663E00, 0x60607C6666667C00,
    0x00003C6060603C00, 0x06063E6666663E00, 0x00003C667E603C00,
    0x1C307C3030303000, 0x00003E66663E067C, 0x60607C6666666600,
    0x1800381818181E00, 0x0C000C0C0C0C0C78, 0x6060666C786C6600,
    0x3818181818181E00, 0x0000CCFED6D6C600, 0x00007C6666666600,
    0x00003C6666663C00, 0x00007C66667C6060, 0x00003E66663E0606,
    0x00007C6660606000, 0x00003E603C067C00, 0x30307E3030301E00,
    0x0000666666663E00, 0x00006666663C1800, 0x0000C6C6D67C6C00,
    0x0000C66C386CC600, 0x00006666663E063C, 0x00007E0C18307E00,
    0x0E18187018180E00, 0x1818181818181800, 0x7018180E18187000,
    0x76DC000000000000, 0xC0A0AEA4C4040400
    ]

final_font = []

for font in fonts:
    original_font = [0x00] * 8

    # Put the sequence in an array
    for i in range(8):
        original_font[i] = (font >> (8*(i))) & 0xFF

    hanover_font = [0x00] * 8

    j = 7
    for byte in original_font:
        for i in range(8):
            hanover_font[(i)] |= ((byte >> (7-i)) & 1) << j
        j -= 1

    final_font.append(hanover_font)


#print final_font

han_final = []
han = [0x00] * 16
for font in final_font:
    han = []
    for i in range(8):
        han.append(ord("%X"%(font[i] >> 4)))
        han.append(ord("%X"%(font[i] % 16)))
    
    han_final.append(han)
print han_final

#for font in final_font:
#    print ""
#    for i in range(8):
#        print format(font[7-i], "#010b")
